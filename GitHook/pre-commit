#!/usr/bin/env php
<?php

define('PROJECT_ROOT', __DIR__.'/../');    //项目的路径
define('PHP_CS_CHECK_CMD', PROJECT_ROOT.'/vendor/bin/phpcs');    //执行检查的命令
define('PHP_CS_RULESET', PROJECT_ROOT.'/Githook/fp-ruleset.xml');        //检查和修复使用的rule set，为空时使用默认的
define('AUTO_FIX_CS', TRUE);        //是否自动修复文件
define('PHP_CS_FIX_CMD', PROJECT_ROOT.'/vendor/bin/phpcbf');    //修复的命令
define('AUTO_GIT_CI', TRUE);        //是否修复完自动提交


$lDiffFile = gitDiffFile(PROJECT_ROOT);
//过滤掉非php文件，
$lChangeFile = array_filter(
	$lDiffFile, function ($sFileName) {
	return file_exists(PROJECT_ROOT.'/'.$sFileName) && filterByFileExt($sFileName);
	}
);
if(!$lChangeFile) {
	displayAndSleep('No php file in change list.');
	exit(0);
}

//echo "\n\n		PHP file change list:\n", implode("\n", $lChangeFile);

displayAndSleep('PHP code style check:');
$lFailPass = [];
foreach($lChangeFile as $lFilePath) {
	$sRealPath = PROJECT_ROOT.'/'.$lFilePath;
	$retVal = phpCsSniffer($sRealPath);
	if ($retVal) {
		$lFailPass[] = $sRealPath;
	} else {
		echo "Status: PASS\n";
	}
}
if (!$lFailPass) {
	exit(0);
}
displayAndSleep("Check summary: error(".count($lFailPass). "/".count($lChangeFile).")");

//自动修复
if (AUTO_FIX_CS) {
	displayAndSleep('Try to fix:');
	foreach($lFailPass as $sRealPath) {
		echo 'Fixing: ', $sRealPath,"\n";
		$ret = fixPhpFile($sRealPath);
	}
	$sfileList = implode(' ', $lDiffFile);
	displayAndSleep('git add AND diff');
	system('git add --all '.$sfileList);
	system('git diff --cached '.$sfileList);
}

//自动提交
if (AUTO_FIX_CS && AUTO_GIT_CI) {
	displayAndSleep('git commit:');
	$sfileList = implode(' ', $lFailPass);
	system('git commit --no-verify');
	exit(0);
}

//exec(PHP_CS_CHECK_CMD.' '.PROJECT_ROOT, $lOutput, $retVal);
//var_dump($lOutput, $retVal);
exit(1);
function displayAndSleep($str) {
	echo "\n\n\t\t",$str,"\n\n";
	sleep(1);
}


function fixPhpFile($sPath) {

	$cmd = PHP_CS_FIX_CMD.
		(PHP_CS_RULESET ? ' --standard='.PHP_CS_RULESET.' ' : ' ')
		.$sPath;
	system($cmd, $retVal);
	return $retVal;
}

function phpCsSniffer($sPath) {

	$cmd = PHP_CS_CHECK_CMD.
		(PHP_CS_RULESET ? ' --standard='.PHP_CS_RULESET.' ' : ' ')
		.$sPath;
	system($cmd, $retVal);
	return $retVal;
}

function gitDiffFile($sPath) {

	exec('git diff --cached --name-only '.$sPath, $lOutput, $retVal);
	return $lOutput ?: [];
}

function filterByFileExt($sFileName, $sExt = '.php') {
	$x = preg_match('/(.*)('.$sExt.')$/', $sFileName);
	return $x;
}
